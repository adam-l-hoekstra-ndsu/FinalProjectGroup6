@page "/forgot-password"
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Data
@using FinalProjectGroup6.Models
@using FinalProjectGroup6.Services
@using System.ComponentModel.DataAnnotations;
@using System.Net;
@using System.Net.Mail;
@inject IDbContextFactory<FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager

<h3>Forgot Password</h3>

<EditForm Model="@myForgotPasswordModel" OnValidSubmit="SendResetLink" FormName="ForgotPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="myForgotPasswordModel.EmailAddress" />
    </div>

    <button type="submit" class="btn btn-primary">Send Reset Link</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div>@Message</div>
}

@code {
    public class ForgotPasswordModel
    {
        [Required]
        [EmailAddress]
        public string EmailAddress { get; set; }
    }

    [SupplyParameterFromForm]
    private ForgotPasswordModel myForgotPasswordModel { get; set; } = new();
    private string Message { get; set; }

    private async Task SendResetLink()
    {
        using var context = DbFactory.CreateDbContext();
        var user = await context.User.SingleOrDefaultAsync(u => u.EmailAddress == myForgotPasswordModel.EmailAddress);

        if (user == null)
        {
            Message = "Sorry but this email does not exist in our system.";
            return;
        }

        // Generate a token
        var token = GenerateResetToken(user.Id);

        // Send email with reset link
        var resetLink = NavigationManager.BaseUri + $"reset-password/{token}";
        
        EmailService.SendEmail(myForgotPasswordModel.EmailAddress, "Password Reset", $"Click here to reset your password: {resetLink}");

        Message = "If the email exists in our system, you will receive a reset link.";
    }

    private string GenerateResetToken(int userId)
    {
        // Generate token using Base64
        var token = Convert.ToBase64String(Guid.NewGuid().ToByteArray());
        SaveTokenToDatabase(userId, token);
        return token;
    }

    private void SaveTokenToDatabase(int userId, string token)
    {
        // Save token and expiration in the database
        using var context = DbFactory.CreateDbContext();
        var resetToken = new PasswordResetToken
            {
                UserId = userId,
                Token = token,
                Expiry = DateTime.UtcNow.AddHours(1) // 1-hour validity
            };

        context.PasswordResetToken.Add(resetToken);
        context.SaveChanges();
    }

    
}

