@page "/dogs/profile"
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Models
@using FinalProjectGroup6.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<FinalProjectGroup6.Data.FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Dog Profile</PageTitle>

<h1>Dog Profile</h1>

<div>
    <hr />
    @if (dog is null )//|| shelter is null || shelterAddress is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
            <div class="shelterdogprofile-box">
            <img src="@dog.Picture" alt="@dog.Name" class="img-fluid" />
                <div class="shelterdogprofile-info">
                <table class="center">
                    <tr>
                        <th>Name</th>
                        <td>@dog.Name</td>
                    </tr>
                    <tr>
                        <th>Age</th>
                        <td>@dog.Age Years Old</td>
                    </tr>
                    <tr>
                        <th>Gender</th>
                        <td>@dog.Gender</td>
                    </tr>
                    <tr>
                        <th>Neutered or Spayed</th>
                        <td>@yesNoNeuteredSpayed(dog)</td>
                    </tr>
                    <tr>
                        <th>Breed</th>
                        <td>@dog.Breed</td>
                    </tr>
                    <tr>
                        <th>Color</th>
                        <td>@dog.Color</td>
                    </tr>
                    <tr>
                        <th>Size</th>
                        <td>@dog.Size</td>
                    </tr>
                    <tr>
                        <th>Avalibility</th>
                        <td>@getDogStatus(dog)</td>
                    </tr>
                    <tr>
                        <th>Shelter</th>
                        <td><a href="@($"/animalshelters/profile?id={shelter.Id}")">@shelter.Name</a> </td>
                    </tr>
                </table>
                <div>
                <p></p>
                </div>
                    <div class="text-center">
                        <a href="@("/dogs/search")" class="btn btn-primary">Back to Search</a>
                        <a>     </a>
                        <a href="@("/error")" class="btn btn-primary">Contact Us</a>
                        <AuthorizeView>
                            <NotAuthorized>
                                <a href="/login" class="btn btn-secondary">Login to Adopt</a>
                            </NotAuthorized>
                            <Authorized>
                                <a href="@("/dog/adopt")" class="btn btn-primary">Adopt</a>
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        <div>
            <AuthorizeView Roles="Administrator, Shelter Employee">
                <a href="@($"/dogs/edit?id={dog.Id}")">Edit</a>
                <a href="@($"/dogs/delete?id={dog.Id}")">Delete</a>
            </AuthorizeView> 
        </div>
    }
</div>

@code {
    private Dog? dog;
    private AnimalShelter shelter;
    private Address? shelterAddress;
    private FinalProjectGroup6Context context = default!;


    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        dog = await context.Dog.FirstOrDefaultAsync(m => m.Id == Id);
        shelter = await context.AnimalShelter.FirstOrDefaultAsync(d => d.Id == dog.ShelterId);

        if (dog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private string yesNoNeuteredSpayed(Dog dog)
    {
        if (dog.IsNeuteredSpayed) return "Yes";
        return "No";
    }

    private string getDogStatus(Dog dog)
    {
        switch (dog.Status)
        {
            case (0):
                return "Avaliable";
            case (1):
                return "Pending Adoption";
            case (2):
                return "Unavaliable";
            default:
                return "Avaliable";
        }
    }

    private string getReadableAddress()
    {
        if (shelterAddress is not null)
        {
            return $"{shelterAddress.StreetAddress}, {shelterAddress.City}, {shelterAddress.State}, {shelterAddress.ZipCode}";
        }
        return "Loading";
    }
}
