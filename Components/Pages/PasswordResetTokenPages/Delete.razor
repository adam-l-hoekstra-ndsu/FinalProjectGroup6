@page "/passwordresettokens/delete"
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Models
@inject IDbContextFactory<FinalProjectGroup6.Data.FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>PasswordResetToken</h2>
    <hr />
    @if (passwordresettoken is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@passwordresettoken.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Token</dt>
            <dd class="col-sm-10">@passwordresettoken.Token</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Expiry</dt>
            <dd class="col-sm-10">@passwordresettoken.Expiry</dd>
        </dl>
        <EditForm method="post" Model="passwordresettoken" OnValidSubmit="DeletePasswordResetToken" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(passwordresettoken is null)">Delete</button> |
            <a href="/passwordresettokens">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private PasswordResetToken? passwordresettoken;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        passwordresettoken = await context.PasswordResetToken.FirstOrDefaultAsync(m => m.Id == Id);

        if (passwordresettoken is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePasswordResetToken()
    {
        using var context = DbFactory.CreateDbContext();
        context.PasswordResetToken.Remove(passwordresettoken!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/passwordresettokens");
    }
}
