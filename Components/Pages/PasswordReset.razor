  @page "/reset-password/{token}"
  @using Microsoft.EntityFrameworkCore
  @using FinalProjectGroup6.Data
  @using FinalProjectGroup6.Models
  @using FinalProjectGroup6.Services
  @using System.ComponentModel.DataAnnotations;
  @inject IDbContextFactory<FinalProjectGroup6Context> DbFactory
  @inject NavigationManager NavigationManager

  <h3>Reset Password</h3>

<!-- Form for resetting the password -->
<EditForm Model="@myResetPasswordModel" OnValidSubmit="ResetPassword" FormName="ResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- New password input field -->
    <div class="mb-3">
        <label for="password" class="form-label">New Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="myResetPasswordModel.NewPassword" />
    </div>

    <!-- Submit button for resetting the password -->
    <button type="submit" class="btn btn-primary">Reset Password</button>
</EditForm>

<!-- Display success or error message-->
@if (!string.IsNullOrEmpty(Message))
{
    <div>@Message</div>
}

@code {
    [Parameter]
    public string Token { get; set; }

    // Model class for resetting the password with validation attributes
    public class ResetPasswordModel
    {
        [Required]
        [MinLength(6)]
        public string NewPassword { get; set; } = string.Empty;
    }

    [SupplyParameterFromForm]
    private ResetPasswordModel myResetPasswordModel { get; set; } = new();

    // Message to display success or error after password reset attempt
    private string Message { get; set; }

    // Method for handling the password reset process
    private async Task ResetPassword()
    {
        using var context = DbFactory.CreateDbContext();

        // Retrieve the reset token from the database (checks if token exists and is not expired)
        var resetToken = await context.PasswordResetToken
            .FirstOrDefaultAsync(t => t.Token == Token && t.Expiry > DateTime.UtcNow);

        // If the reset token is invalid or expired, show an error message
        if (resetToken == null)
        {
            Message = "Invalid or expired token.";
            return;
        }

        // Retrieve the user associated with the reset token
        var user = await context.User.FindAsync(resetToken.UserId);
        // If no user is found, show an error message
        if (user == null)
        {
            Message = "User not found.";
            return;
        }

        //Hash the new password
        user.Password = PasswordService.HashPassword(myResetPasswordModel.NewPassword);

        //Remove the used token
        context.PasswordResetToken.Remove(resetToken);
        await context.SaveChangesAsync();

        // Display a success message and navigate the user to the login page
        Message = "Password successfully reset.";
        NavigationManager.NavigateTo("/login");

    }

   }



