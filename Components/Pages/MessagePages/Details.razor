@page "/messages/details"
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Models
@inject IDbContextFactory<FinalProjectGroup6.Data.FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Message</h2>
    <hr />
    @if (message is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Sent From</dt>
            <dd class="col-sm-10">@getUserFullName(message, true)</dd>
            <dt class="col-sm-2">Sent To</dt>
            <dd class="col-sm-10">@getUserFullName(message, false)</dd>
            <dt class="col-sm-2">Timestamp</dt>
            <dd class="col-sm-10">@message.Timestamp</dd>
            <dt class="col-sm-2">Subject</dt>
            <dd class="col-sm-10">@message.Subject</dd>
            <dt class="col-sm-2">Body</dt>
            <dd class="col-sm-10">@message.Body</dd>
        </dl>
        <div>
            <a href="@($"/messages")" class="btn btn-primary">Back to List</a>
        </div>
    }
</div>

@code {
    private Message? message;
    private List<User>? users;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        message = await context.Message.FirstOrDefaultAsync(m => m.Id == Id);
        users = context.User.ToList();

        if (message is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private string getUserFullName(Message message, bool sentFrom)
    {
        if (sentFrom)
        {
            foreach (var user in users)
            {
                if (message.UserSentFrom == user.Id) return $"{user.FirstName} {user.LastName}";
            }
        }
        foreach (var user in users)
        {
            if (message.UserSentTo == user.Id) return $"{user.FirstName} {user.LastName}";
        }
        return "User Not Found";
    }
}
