@page "/messages/reply"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<FinalProjectGroup6.Data.FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create</PageTitle>

<h1>Reply</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Message" OnValidSubmit="AddMessage" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>              
            <div class="mb-3">
                <label for="body" class="form-label">Reply</label> 
                <InputTextArea id="body" @bind-Value="Message.Body" class="form-control" /> 
                <ValidationMessage For="() => Message.Body" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Send</button>
        </EditForm>
    </div>
</div>

<div>
    <p></p>
    <a href="/messages" class="btn btn-outline-primary">Cancel</a>
</div>

@code {
    private List<User>? users;
    private int userId = -1;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Message Message { get; set; } = new();
    private Message? MessageToReply { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        using var context = DbFactory.CreateDbContext();
        users = context.User.ToList();
        MessageToReply ??= await context.Message.FirstOrDefaultAsync(m => m.Id == Id);

        // Get the Authentication State
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Get the user
        var user = authState.User;

        // Check if the user is authenticated
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Extract the name claim
            var nameClaim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Name);
            var idClaim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier);


            if (idClaim != null)
            {
                userId = Convert.ToInt32(idClaim.Value);
            }
        }
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMessage()
    {
        Message.Timestamp = DateTime.Now;
        Message.UserSentFrom = userId;
        Message.UserSentTo = MessageToReply.UserSentFrom;
        Message.Subject = $"Re: {MessageToReply.Subject}";
        using var context = DbFactory.CreateDbContext();
        context.Message.Add(Message);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/messages");
    }
}
