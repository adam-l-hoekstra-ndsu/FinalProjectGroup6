@page "/messages/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using FinalProjectGroup6.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<FinalProjectGroup6.Data.FinalProjectGroup6Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Message</h2>
<hr />
@if (Message is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Message" OnValidSubmit="UpdateMessage" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div>
                    <label for="userSentToSelect">To:</label>
                    <InputSelect id="userSentToSelect" @bind-Value="Message.UserSentTo">
                        @foreach (var user in users)
                        {
                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="subject" class="form-label">Subject:</label>
                    <InputText id="subject" @bind-Value="Message.Subject" class="form-control" />
                    <ValidationMessage For="() => Message.Subject" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="body" class="form-label">Body:</label>
                    <InputText id="body" @bind-Value="Message.Body" class="form-control" />
                    <ValidationMessage For="() => Message.Body" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/messages">Back to List</a>
</div>

@code {
    private List<User>? users;
    private int userId = -1;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Message? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Message ??= await context.Message.FirstOrDefaultAsync(m => m.Id == Id);
        users = context.User.ToList();

        if (Message is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Get the Authentication State
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Get the user
        var user = authState.User;

        // Check if the user is authenticated
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // Extract the name claim
            var nameClaim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Name);
            var idClaim = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier);


            if (idClaim != null)
            {
                userId = Convert.ToInt32(idClaim.Value);
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMessage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Message!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MessageExists(Message!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/messages");
    }

    private bool MessageExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Message.Any(e => e.Id == id);
    }
}
